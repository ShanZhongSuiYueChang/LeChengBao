{"version":3,"sources":["assets\\script\\MatirxScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n  @property(cc.EditBox)\n  xInput: cc.EditBox = null;\n  @property(cc.EditBox)\n  yInput: cc.EditBox = null;\n  @property(cc.Node)\n  matrixContainer: cc.Node = null;\n  @property(cc.Prefab)\n  cellPrefab: cc.Prefab = null;\n  private colors: cc.Color[] = [\n    cc.Color.RED,\n    cc.Color.GREEN,\n    cc.Color.BLUE,\n    cc.Color.YELLOW,\n    cc.Color.MAGENTA,\n  ];\n  private matrix: cc.Node[][] = [];\n  // LIFE-CYCLE CALLBACKS:\n\n  // onLoad () {}\n\n  start() {\n    const generateButton = this.node.getChildByName(\"btnGenerate\");\n    generateButton.on(cc.Node.EventType.TOUCH_END, this.generateMatrix, this);\n  }\n\n  // update (dt) {}\n  generateMatrix() {\n    const x = parseInt(this.xInput.string);\n    const y = parseInt(this.yInput.string);\n\n    // Clear existing matrix\n    this.matrixContainer.removeAllChildren();\n    // 为每个cell设置颜色\n    for (let i = 0; i < x; i++) {\n      this.matrix[i] = [];\n      for (let j = 0; j < y; j++) {\n        const colorIndex = Math.floor(Math.random() * this.colors.length);\n        const cell = cc.instantiate(this.cellPrefab);\n\n        cell.color = this.colors[colorIndex];\n        //设置cell的size\n        cell.setContentSize(50, 50);\n        //设置位置\n        cell.setPosition(i * 60, j * 60);\n        this.matrixContainer.addChild(cell);\n        this.matrix[i][j] = cell;\n      }\n    }\n\n    // Adjust probabilities based on neighbors\n    for (let i = 1; i < x; i++) {\n      for (let j = 1; j < y; j++) {\n        const prevColor = this.matrix[i - 1][j].color;\n        const aboveColor = this.matrix[i][j - 1].color;\n        const currentColor = this.matrix[i][j].color;\n\n        if (prevColor.equals(aboveColor)) {\n          // Increase probability by Y%\n          // Adjust Y as needed\n          // Example: currentColor.a += 0.1; // Increase alpha by 10%\n        } else {\n          // Split remaining probability evenly\n          // Example: currentColor.a += (1 - currentColor.a) / 3;\n        }\n      }\n    }\n  }\n}\n"]}